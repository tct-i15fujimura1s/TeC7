/*
 * TaC IPL Source Code
 *    Tokuyama kousen Educational Computer 16bit Ver.
 *
 * Copyright (C) 2009-2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * console.cmm : TaC IPL の画面制御部分
 *
 * 2019.04.01           : putSIO を public にする
 * 2016.01.10           : ハードウェアカーソルの制御機能を追加
 * 2012.12.26           : TaC-OS と共通化のため puthex を _puthex に名称変更
 * 2012.09.13 v2.0.0    : TaC-CPU V2 用に変更(TAB,BSを省略しサイズを縮小)
 * 2012.02.29           : cls を public に変更
 * 2012.01.08 v1.0.0    : 画面制御部分を ipl.cmm から分離
 * 2009.03.13 v0.0      : 開発開始
 *
 * $Id$
 *
 */

#include "crt0.h"
#include "console.h"

//
// グローバル変数 (BSSに配置)
//
int[] vRam;                                   // VRAM のアドレス
int cx,cy;                                    // VRAM 上のカーソル位置

// 画面のクリア
public void cls() {
  for (int i=0; i<2000; i=i+1)
    vRam[i] = 0;
  cx = cy = 0;
}

// 改行
void newline() {
  cx = 0;
  if ((cy = cy + 1)>=25) {
    for (int i=0; i<24*80; i=i+1)
      vRam[i] = vRam[i+80];
    for (int i=24*80; i<25*80; i=i+1)
      vRam[i] = 0;
    cy=24;
  }
}

// 表示可能文字
void printable(char c) {
  vRam[cy*80+cx]=ord(c);
  if ((cx = cx + 1)>=80)
    newline();
}

/*
// TAB
void tab() {
  int stop = (cx+8) & 0x0fff8;
  for (int i=cx; i<stop; i=i+1)
    printable(' ');
}

// バックスペース
void backspace() {
  if (cx==0 && cy==0) return;                 // これ以上戻れない

  cx = cx - 1;                                // カーソルを左に移動

  if (cx < 0) {                               // 左端を突き抜けた
    cx = 79;                                  // 前の行の右端に移動
    cy = cy - 1;
  }
}
*/

// 1文字表示ルーチン
void putVGA(char c) {                         // VGA への出力
  if (c=='\r') {                              // 復帰
     cx = 0;
  } else if (c=='\n') {                       // 改行(実は復帰もする)
     newline();
/*
  } else if (c=='\t') {                       // TAB
     tab();
  } else if (c=='\10') {                      // バックスペース
     backspace();
*/
  } else if (0x20<=ord(c) && ord(c)<=0x7e) {  // 表示可能な文字だけ
     printable(c);
  }
  vRam[2045] = cx;                            // ハードウェアカーソル座標
  vRam[2046] = cy;                            //   レジスタは VRAM 最後にある
}

//
// 外部へ公開する関数
//
// SIOへ1文字出力（IPL本体も使用する）
public void putSIO(char c) {                  // SIO への出力
  while((in(0x0a) & 0x80)==0)
    ;
  out(0x08, ord(c));
}

// 1文字出力
public void putch(char c) {                   // VGA と SIO の両方へ出力する
#ifdef SIO
  if (c=='\n') putSIO('\r');
  putSIO(c);
#endif
  putVGA(c);
}

// 文字列出力
public void putstr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1)
    putch(str[i]);
}

// 16進数出力
char[] hstr = "0123456789abcdef";
public void _puthex(int x) {
  putch(hstr[(x>>12)&0x000f]);
  putch(hstr[(x>>8 )&0x000f]);
  putch(hstr[(x>>4 )&0x000f]);
  putch(hstr[(x    )&0x000f]);
}
 
// 画面の初期化
public void consInit() {
  vRam = _ItoA(VRAM);                         // VRAM のアドレス
  cls();                                      // 画面クリア
  vRam[2045] = 0;                             // ハードウェアカーソル座標
  vRam[2046] = 0;                             //   レジスタは VRAM 最後にある
}
